
 Entering Single Terminal Extractor
True:(Branch Cond:( Lor Next:(Terminal usb_test.send_data),(Terminal usb_test._rn0_tx_valid)) True:(Terminal usb_test._rn1_next_state) False:(Terminal usb_test._rn2_next_state))

 Terminal information:  send_data

*******************

Starting Flow at... 2023/07/30- 19 hr-25 m.-57 s
module_name :  controller
copied_block:  module v_controller(  
                     input clk,
                     input reset,
                     input START,      
                     input MEM_READ,   
                     output reg BUSY,
                     output reg DONE,
                     output reg input_matrix_ram_en,
                     output reg input_matrix_ram_read_en,
                     output reg [9:0] input_matrix_ram_address,
                     output reg filter_matrix_rom_en,
                     output reg filter_matrix_rom_read_en,
                     output reg filter_matrix_rom_address,
                     output reg [4:0] data_path_signal,          // concatnation of signals which control different sections of datapath
                     output reg [1:0] fifo_command                          
    );


Iverilog command called with switches :  ['iverilog', '-E', '-o', 'preprocess.output']
Type of constwidth <class 'int'>
Type of constwidth <class 'int'>
Type of constwidth <class 'int'>
Type of constwidth <class 'int'>
Type of constwidth <class 'int'>
Type of constwidth <class 'int'>
Type of constwidth <class 'int'>
Type of constwidth <class 'int'>
Type of constwidth <class 'int'>
Type of constwidth <class 'int'>
Type of constwidth <class 'int'>

Term:
(Term name:controller.BUSY type:['Output', 'Reg'] msb:(IntConst 0) lsb:(IntConst 0))
(Term name:controller.DONE type:['Output', 'Reg'] msb:(IntConst 0) lsb:(IntConst 0))
(Term name:controller.INIT type:['Parameter'] msb:(IntConst 31) lsb:(IntConst 0))
(Term name:controller.L1_ADD type:['Parameter'] msb:(IntConst 31) lsb:(IntConst 0))
(Term name:controller.L2_ADD type:['Parameter'] msb:(IntConst 31) lsb:(IntConst 0))
(Term name:controller.L3_ADD type:['Parameter'] msb:(IntConst 31) lsb:(IntConst 0))
(Term name:controller.L4_ADD type:['Parameter'] msb:(IntConst 31) lsb:(IntConst 0))
(Term name:controller.LOAD type:['Parameter'] msb:(IntConst 31) lsb:(IntConst 0))
(Term name:controller.MEM_READ type:['Input'] msb:(IntConst 0) lsb:(IntConst 0))
(Term name:controller.MEM_STORE type:['Parameter'] msb:(IntConst 31) lsb:(IntConst 0))
(Term name:controller.MULT type:['Parameter'] msb:(IntConst 31) lsb:(IntConst 0))
(Term name:controller.START type:['Input'] msb:(IntConst 0) lsb:(IntConst 0))
(Term name:controller.STATE_SIZE type:['Parameter'] msb:(IntConst 31) lsb:(IntConst 0))
(Term name:controller.clk type:['Input'] msb:(IntConst 0) lsb:(IntConst 0))
(Term name:controller.count type:['Reg'] msb:(Operator Minus Next:(Terminal controller.counter_size),(IntConst 1)) lsb:(IntConst 0))
(Term name:controller.count_next type:['Reg'] msb:(Operator Minus Next:(Terminal controller.counter_size),(IntConst 1)) lsb:(IntConst 0))
(Term name:controller.counter_size type:['Parameter'] msb:(IntConst 31) lsb:(IntConst 0))
(Term name:controller.current_state type:['Reg'] msb:(Operator Minus Next:(Terminal controller.STATE_SIZE),(IntConst 1)) lsb:(IntConst 0))
(Term name:controller.data_path_signal type:['Output', 'Reg'] msb:(IntConst 4) lsb:(IntConst 0))
(Term name:controller.fifo_command type:['Output', 'Reg'] msb:(IntConst 1) lsb:(IntConst 0))
(Term name:controller.filter_matrix_rom_address type:['Output', 'Reg'] msb:(IntConst 0) lsb:(IntConst 0))
(Term name:controller.filter_matrix_rom_en type:['Output', 'Reg'] msb:(IntConst 0) lsb:(IntConst 0))
(Term name:controller.filter_matrix_rom_read_en type:['Output', 'Reg'] msb:(IntConst 0) lsb:(IntConst 0))
(Term name:controller.input_matrix_ram_address type:['Output', 'Reg'] msb:(IntConst 9) lsb:(IntConst 0))
(Term name:controller.input_matrix_ram_en type:['Output', 'Reg'] msb:(IntConst 0) lsb:(IntConst 0))
(Term name:controller.input_matrix_ram_read_en type:['Output', 'Reg'] msb:(IntConst 0) lsb:(IntConst 0))
(Term name:controller.next_state type:['Reg'] msb:(Operator Minus Next:(Terminal controller.STATE_SIZE),(IntConst 1)) lsb:(IntConst 0))
(Term name:controller.reset type:['Input'] msb:(IntConst 0) lsb:(IntConst 0))
(Term name:controller.state_counter type:['Reg'] msb:(Operator Minus Next:(Terminal controller.counter_size),(IntConst 1)) lsb:(IntConst 0))
(Term name:controller.state_counter_next type:['Reg'] msb:(Operator Minus Next:(Terminal controller.counter_size),(IntConst 1)) lsb:(IntConst 0))
(Term name:controller.w_fifo_command type:['Reg'] msb:(IntConst 1) lsb:(IntConst 0))
(Term name:controller.w_fifo_command_next type:['Reg'] msb:(IntConst 1) lsb:(IntConst 0))
(Term name:controller.w_filter_matrix_rom_address type:['Reg'] msb:(IntConst 0) lsb:(IntConst 0))
(Term name:controller.w_filter_matrix_rom_address_next type:['Reg'] msb:(IntConst 0) lsb:(IntConst 0))
(Term name:controller.w_input_matrix_ram_address type:['Reg'] msb:(IntConst 9) lsb:(IntConst 0))
(Term name:controller.w_input_matrix_ram_address_next type:['Reg'] msb:(IntConst 9) lsb:(IntConst 0))

 These are the nodes for which dataflow trees can be generated : 

 [0] List of Binding keys:  controller.counter_size

 [1] List of Binding keys:  controller.STATE_SIZE

 [2] List of Binding keys:  controller.INIT

 [3] List of Binding keys:  controller.LOAD

 [4] List of Binding keys:  controller.MULT

 [5] List of Binding keys:  controller.L1_ADD

 [6] List of Binding keys:  controller.L2_ADD

 [7] List of Binding keys:  controller.L3_ADD

 [8] List of Binding keys:  controller.L4_ADD

 [9] List of Binding keys:  controller.MEM_STORE

 [10] List of Binding keys:  controller.current_state

 [11] List of Binding keys:  controller.count

 [12] List of Binding keys:  controller.state_counter

 [13] List of Binding keys:  controller.w_input_matrix_ram_address

 [14] List of Binding keys:  controller.w_filter_matrix_rom_address

 [15] List of Binding keys:  controller.input_matrix_ram_address

 [16] List of Binding keys:  controller.filter_matrix_rom_address

 [17] List of Binding keys:  controller.w_fifo_command

 [18] List of Binding keys:  controller.next_state

 [19] List of Binding keys:  controller.w_input_matrix_ram_address_next

 [20] List of Binding keys:  controller.state_counter_next

 [21] List of Binding keys:  controller.count_next

 [22] List of Binding keys:  controller.w_filter_matrix_rom_address_next

 [23] List of Binding keys:  controller.w_fifo_command_next

 [24] List of Binding keys:  controller.DONE

 [25] List of Binding keys:  controller.BUSY

 [26] List of Binding keys:  controller.input_matrix_ram_en

 [27] List of Binding keys:  controller.input_matrix_ram_read_en

 [28] List of Binding keys:  controller.filter_matrix_rom_en

 [29] List of Binding keys:  controller.filter_matrix_rom_read_en

 [30] List of Binding keys:  controller.data_path_signal

 [31] List of Binding keys:  controller.fifo_command


 Generating tree structure for selected node : 
(Bind dest:controller.next_state tree:(Branch Cond:(Operator Eq Next:(Terminal controller.current_state),(Terminal controller.INIT)) True:(Branch Cond:(Terminal controller.START) True:(Terminal controller.LOAD) False:(Terminal controller.INIT)) False:(Branch Cond:(Operator Eq Next:(Terminal controller.current_state),(Terminal controller.LOAD)) True:(Branch Cond:(Operator Eq Next:(Terminal controller.count),(IntConst 10)) True:(Terminal controller.MULT)) False:(Branch Cond:(Operator Eq Next:(Terminal controller.current_state),(Terminal controller.MULT)) True:(Branch Cond:(Operator Eq Next:(Terminal controller.count),(IntConst 15)) True:(Terminal controller.L1_ADD)) False:(Branch Cond:(Operator Eq Next:(Terminal controller.current_state),(Terminal controller.L1_ADD)) True:(Branch Cond:(Operator Eq Next:(Terminal controller.count),(IntConst 7)) True:(Terminal controller.L2_ADD)) False:(Branch Cond:(Operator Eq Next:(Terminal controller.current_state),(Terminal controller.L2_ADD)) True:(Branch Cond:(Operator Eq Next:(Terminal controller.count),(IntConst 7)) True:(Terminal controller.L3_ADD)) False:(Branch Cond:(Operator Eq Next:(Terminal controller.current_state),(Terminal controller.L3_ADD)) True:(Branch Cond:(Operator Eq Next:(Terminal controller.count),(IntConst 7)) True:(Terminal controller.L4_ADD)) False:(Branch Cond:(Operator Eq Next:(Terminal controller.current_state),(Terminal controller.L4_ADD)) True:(Branch Cond:(Operator Eq Next:(Terminal controller.count),(IntConst 7)) True:(Terminal controller.MEM_STORE)) False:(Branch Cond:(Operator Eq Next:(Terminal controller.current_state),(Terminal controller.MEM_STORE)) True:(Branch Cond:(Operator Eq Next:(Terminal controller.state_counter),(IntConst 256)) True:(Terminal controller.INIT) False:(Branch Cond:(Operator Eq Next:(Terminal controller.count),(IntConst 10)) True:(Terminal controller.LOAD))) False:(Branch Cond:(IntConst 1) True:(Terminal controller.current_state))))))))))) 
i is printed
 Pyverilog function call

 This is how Pyverilog creates a tree internally 
     assign controller.next_state = (((controller.current_state==controller.INIT)) ? ((controller.START) ? controller.LOAD : controller.INIT) : (((controller.current_state==controller.LOAD)) ? (((controller.count==10)) ? controller.MULT : controller.next_state) : (((controller.current_state==controller.MULT)) ? (((controller.count==15)) ? controller.L1_ADD : controller.next_state) : (((controller.current_state==controller.L1_ADD)) ? (((controller.count==7)) ? controller.L2_ADD : controller.next_state) : (((controller.current_state==controller.L2_ADD)) ? (((controller.count==7)) ? controller.L3_ADD : controller.next_state) : (((controller.current_state==controller.L3_ADD)) ? (((controller.count==7)) ? controller.L4_ADD : controller.next_state) : (((controller.current_state==controller.L4_ADD)) ? (((controller.count==7)) ? controller.MEM_STORE : controller.next_state) : (((controller.current_state==controller.MEM_STORE)) ? (((controller.state_counter==256)) ? controller.INIT : (((controller.count==10)) ? controller.LOAD : controller.next_state)) : ((1) ? controller.current_state : controller.next_state)))))))));

 *****modified function call *****

** Printing from dataflow.py controller.next_state Destination type  *** <class 'str'>

** Printing from dataflow.py controller.next_state Destination type  *** <class 'str'>

** Printing from dataflow.py controller.next_state Destination type  *** <class 'str'>

** Printing from dataflow.py controller.next_state Destination type  *** <class 'str'>

** Printing from dataflow.py controller.next_state Destination type  *** <class 'str'>

** Printing from dataflow.py controller.next_state Destination type  *** <class 'str'>

** Printing from dataflow.py controller.next_state Destination type  *** <class 'str'>

** Printing from dataflow.py controller.next_state Destination type  *** <class 'str'>

** Printing from dataflow.py controller.next_state Destination type  *** <class 'str'>

** Printing from dataflow.py controller.next_state Destination type  *** <class 'str'>

** Printing from dataflow.py controller.next_state Destination type  *** <class 'str'>

** Printing from dataflow.py controller.next_state Destination type  *** <class 'str'>

** Printing from dataflow.py controller.next_state Destination type  *** <class 'str'>

** Printing from dataflow.py controller.next_state Destination type  *** <class 'str'>

** Printing from dataflow.py controller.next_state Destination type  *** <class 'str'>

** Printing from dataflow.py controller.next_state Destination type  *** <class 'str'>

** Printing from dataflow.py controller.next_state Destination type  *** <class 'str'>

** Printing from dataflow.py controller.next_state Destination type  *** <class 'str'>

 ***** Iteration number :  18

 Prinitng length of a:  1268

 Printing line_buff 
: ['((controller.current_state==controller.INIT) ) && (controller.START ) && |->  (controller.next_state == controller.LOAD )', 'controller.next_state == controller.INIT;', '', '', ' ((controller.current_state==controller.LOAD) ) && ((controller.count==10) ) && |->  (controller.next_state == controller.MULT )', '', ' ((controller.current_state==controller.MULT) ) && ((controller.count==15) ) && |->  (controller.next_state == controller.L1_ADD )', '', ' ((controller.current_state==controller.L1_ADD) ) && ((controller.count==7) ) && |->  (controller.next_state == controller.L2_ADD )', '', ' ((controller.current_state==controller.L2_ADD) ) && ((controller.count==7) ) && |->  (controller.next_state == controller.L3_ADD )', '', ' ((controller.current_state==controller.L3_ADD) ) && ((controller.count==7) ) && |->  (controller.next_state == controller.L4_ADD )', '', ' ((controller.current_state==controller.L4_ADD) ) && ((controller.count==7) ) && |->  (controller.next_state == controller.MEM_STORE )', '', ' ((controller.current_state==controller.MEM_STORE) ) && ((controller.state_counter==256) ) && |->  (controller.next_state == controller.INIT )', ' ((controller.count==10) ) && |->  (controller.next_state == controller.LOAD )', '', '', ' (1 ) && |->  (controller.next_state == controller.current_state )', '', '', '', '', '', '', '', '', ' &&']

 Modified Line_buff 
 ['((controller.current_state==controller.INIT) ) && (controller.START ) && |->  (controller.next_state == controller.LOAD )', 'controller.next_state == controller.INIT;', '', '', ' ((controller.current_state==controller.LOAD) ) && ((controller.count==10) ) && |->  (controller.next_state == controller.MULT )', '', ' ((controller.current_state==controller.MULT) ) && ((controller.count==15) ) && |->  (controller.next_state == controller.L1_ADD )', '', ' ((controller.current_state==controller.L1_ADD) ) && ((controller.count==7) ) && |->  (controller.next_state == controller.L2_ADD )', '', ' ((controller.current_state==controller.L2_ADD) ) && ((controller.count==7) ) && |->  (controller.next_state == controller.L3_ADD )', '', ' ((controller.current_state==controller.L3_ADD) ) && ((controller.count==7) ) && |->  (controller.next_state == controller.L4_ADD )', '', ' ((controller.current_state==controller.L4_ADD) ) && ((controller.count==7) ) && |->  (controller.next_state == controller.MEM_STORE )', '', ' ((controller.current_state==controller.MEM_STORE) ) && ((controller.state_counter==256) ) && |->  (controller.next_state == controller.INIT )', ' ((controller.count==10) ) && |->  (controller.next_state == controller.LOAD )', '', '', ' (1 ) && |->  (controller.next_state == controller.current_state )', '', '', '', '', '', '', '', '', ' &&']


 Number of items in line_buff 
:  30

 type :  <class 'list'>


 True_condition_property: 
[0]   ((controller.current_state==controller.INIT) ) && (controller.START ) && |->  (controller.next_state == controller.LOAD )
[1]   
[2]    ((controller.current_state==controller.LOAD) ) && ((controller.count==10) ) && |->  (controller.next_state == controller.MULT )
[3]    ((controller.current_state==controller.MULT) ) && ((controller.count==15) ) && |->  (controller.next_state == controller.L1_ADD )
[4]    ((controller.current_state==controller.L1_ADD) ) && ((controller.count==7) ) && |->  (controller.next_state == controller.L2_ADD )
[5]    ((controller.current_state==controller.L2_ADD) ) && ((controller.count==7) ) && |->  (controller.next_state == controller.L3_ADD )
[6]    ((controller.current_state==controller.L3_ADD) ) && ((controller.count==7) ) && |->  (controller.next_state == controller.L4_ADD )
[7]    ((controller.current_state==controller.L4_ADD) ) && ((controller.count==7) ) && |->  (controller.next_state == controller.MEM_STORE )
[8]    ((controller.current_state==controller.MEM_STORE) ) && ((controller.state_counter==256) ) && |->  (controller.next_state == controller.INIT )
[9]   
[10]    (1 ) && |->  (controller.next_state == controller.current_state )
[11]   
[12]   
[13]   
[14]   


 False_condition_property:  ['controller.next_state == controller.INIT', '', '', '', '', '', '', '', ' ((controller.count==10) ) && |->  (controller.next_state == controller.LOAD )', '', '', '', '', '', ' &&']
\ length of prop_list :  15
[0]  True part ((controller.current_state==controller.INIT) ) && (controller.START )|->  (controller.next_state == controller.LOAD )
[0]  False Part ((controller.current_state==controller.INIT) ) && (controller.START )|-> (controller.next_state == controller.INIT )

 Handle logic for nested conditions here
[2]  True part ((controller.current_state==controller.LOAD) ) && ((controller.count==10) )|->  (controller.next_state == controller.MULT )
[2]  False Part ((controller.current_state==controller.LOAD) ) && ((controller.count==10) )|-> ( )
[3]  True part ((controller.current_state==controller.MULT) ) && ((controller.count==15) )|->  (controller.next_state == controller.L1_ADD )
[3]  False Part ((controller.current_state==controller.MULT) ) && ((controller.count==15) )|-> ( )
[4]  True part ((controller.current_state==controller.L1_ADD) ) && ((controller.count==7) )|->  (controller.next_state == controller.L2_ADD )
[4]  False Part ((controller.current_state==controller.L1_ADD) ) && ((controller.count==7) )|-> ( )
[5]  True part ((controller.current_state==controller.L2_ADD) ) && ((controller.count==7) )|->  (controller.next_state == controller.L3_ADD )
[5]  False Part ((controller.current_state==controller.L2_ADD) ) && ((controller.count==7) )|-> ( )
[6]  True part ((controller.current_state==controller.L3_ADD) ) && ((controller.count==7) )|->  (controller.next_state == controller.L4_ADD )
[6]  False Part ((controller.current_state==controller.L3_ADD) ) && ((controller.count==7) )|-> ( )
[7]  True part ((controller.current_state==controller.L4_ADD) ) && ((controller.count==7) )|->  (controller.next_state == controller.MEM_STORE )
[7]  False Part ((controller.current_state==controller.L4_ADD) ) && ((controller.count==7) )|-> ( )
[8]  True part ((controller.current_state==controller.MEM_STORE) ) && ((controller.state_counter==256) )|->  (controller.next_state == controller.INIT )
[8]  False Part ((controller.current_state==controller.MEM_STORE) ) && ((controller.state_counter==256) )|-> ( ((controller.count==10) ) && |->  (controller.next_state == controller.LOAD ) )

 Handle logic for nested conditions here
[10]  True part (1 )|->  (controller.next_state == controller.current_state )
[10]  False Part (1 )|-> ( )

 Handle logic for nested conditions here

 Handle logic for nested conditions here

 Handle logic for nested conditions here

 Handle logic for nested conditions here


 true_part :  ['((controller.current_state==controller.INIT) ) && (controller.START )|->  (controller.next_state == controller.LOAD )', '((controller.current_state==controller.LOAD) ) && ((controller.count==10) )|->  (controller.next_state == controller.MULT )', '((controller.current_state==controller.MULT) ) && ((controller.count==15) )|->  (controller.next_state == controller.L1_ADD )', '((controller.current_state==controller.L1_ADD) ) && ((controller.count==7) )|->  (controller.next_state == controller.L2_ADD )', '((controller.current_state==controller.L2_ADD) ) && ((controller.count==7) )|->  (controller.next_state == controller.L3_ADD )', '((controller.current_state==controller.L3_ADD) ) && ((controller.count==7) )|->  (controller.next_state == controller.L4_ADD )', '((controller.current_state==controller.L4_ADD) ) && ((controller.count==7) )|->  (controller.next_state == controller.MEM_STORE )', '((controller.current_state==controller.MEM_STORE) ) && ((controller.state_counter==256) )|->  (controller.next_state == controller.INIT )', '(1 )|->  (controller.next_state == controller.current_state )']


 false_part :  ['((controller.current_state==controller.INIT) ) && (controller.START )|-> (controller.next_state == controller.INIT )', '((controller.current_state==controller.LOAD) ) && ((controller.count==10) )|-> ( )', '((controller.current_state==controller.MULT) ) && ((controller.count==15) )|-> ( )', '((controller.current_state==controller.L1_ADD) ) && ((controller.count==7) )|-> ( )', '((controller.current_state==controller.L2_ADD) ) && ((controller.count==7) )|-> ( )', '((controller.current_state==controller.L3_ADD) ) && ((controller.count==7) )|-> ( )', '((controller.current_state==controller.L4_ADD) ) && ((controller.count==7) )|-> ( )', '((controller.current_state==controller.MEM_STORE) ) && ((controller.state_counter==256) )|-> ( ((controller.count==10) ) && |->  (controller.next_state == controller.LOAD ) )', '(1 )|-> ( )']

 Root Node Name :  next_state

 ********** 


 Adding false properties*******

(Bind dest:controller.data_path_signal tree:(Branch Cond:(Operator Eq Next:(Terminal controller.current_state),(Terminal controller.INIT)) True:(IntConst 5'b00000) False:(Branch Cond:(Operator Eq Next:(Terminal controller.current_state),(Terminal controller.LOAD)) True:(IntConst 5'b00000) False:(Branch Cond:(Operator Eq Next:(Terminal controller.current_state),(Terminal controller.MULT)) True:(IntConst 5'b10000) False:(Branch Cond:(Operator Eq Next:(Terminal controller.current_state),(Terminal controller.L1_ADD)) True:(IntConst 5'b01000) False:(Branch Cond:(Operator Eq Next:(Terminal controller.current_state),(Terminal controller.L2_ADD)) True:(IntConst 5'b00100) False:(Branch Cond:(Operator Eq Next:(Terminal controller.current_state),(Terminal controller.L3_ADD)) True:(IntConst 5'b00010) False:(Branch Cond:(Operator Eq Next:(Terminal controller.current_state),(Terminal controller.L4_ADD)) True:(IntConst 5'b00001) False:(Branch Cond:(Operator Eq Next:(Terminal controller.current_state),(Terminal controller.MEM_STORE)) True:(IntConst 5'b00000) False:(Branch Cond:(IntConst 1) True:(IntConst 5'b00000) False:(IntConst 5'b00000))))))))))) 
i is printed
 Pyverilog function call

 This is how Pyverilog creates a tree internally 
     assign controller.data_path_signal = (((controller.current_state==controller.INIT)) ? 5'b00000 : (((controller.current_state==controller.LOAD)) ? 5'b00000 : (((controller.current_state==controller.MULT)) ? 5'b10000 : (((controller.current_state==controller.L1_ADD)) ? 5'b01000 : (((controller.current_state==controller.L2_ADD)) ? 5'b00100 : (((controller.current_state==controller.L3_ADD)) ? 5'b00010 : (((controller.current_state==controller.L4_ADD)) ? 5'b00001 : (((controller.current_state==controller.MEM_STORE)) ? 5'b00000 : ((1) ? 5'b00000 : 5'b00000)))))))));

 *****modified function call *****

** Printing from dataflow.py controller.data_path_signal Destination type  *** <class 'str'>

** Printing from dataflow.py controller.data_path_signal Destination type  *** <class 'str'>

** Printing from dataflow.py controller.data_path_signal Destination type  *** <class 'str'>

** Printing from dataflow.py controller.data_path_signal Destination type  *** <class 'str'>

** Printing from dataflow.py controller.data_path_signal Destination type  *** <class 'str'>

** Printing from dataflow.py controller.data_path_signal Destination type  *** <class 'str'>

** Printing from dataflow.py controller.data_path_signal Destination type  *** <class 'str'>

** Printing from dataflow.py controller.data_path_signal Destination type  *** <class 'str'>

** Printing from dataflow.py controller.data_path_signal Destination type  *** <class 'str'>

 ***** Iteration number :  30

 Prinitng length of a:  877

 Printing line_buff 
: ['((controller.current_state==controller.INIT) ) && |->  (controller.data_path_signal == None )', ' ((controller.current_state==controller.LOAD) ) && |->  (controller.data_path_signal == None )', ' ((controller.current_state==controller.MULT) ) && |->  (controller.data_path_signal == None )', ' ((controller.current_state==controller.L1_ADD) ) && |->  (controller.data_path_signal == None )', ' ((controller.current_state==controller.L2_ADD) ) && |->  (controller.data_path_signal == None )', ' ((controller.current_state==controller.L3_ADD) ) && |->  (controller.data_path_signal == None )', ' ((controller.current_state==controller.L4_ADD) ) && |->  (controller.data_path_signal == None )', ' ((controller.current_state==controller.MEM_STORE) ) && |->  (controller.data_path_signal == None )', ' (1 ) && |->  (controller.data_path_signal == None )', 'controller.data_path_signal == None;', '', '', '', '', '', '', '', '', '', ' &&']

 Modified Line_buff 
 ['((controller.current_state==controller.INIT) ) && |->  (controller.data_path_signal == None )', ' ((controller.current_state==controller.LOAD) ) && |->  (controller.data_path_signal == None )', ' ((controller.current_state==controller.MULT) ) && |->  (controller.data_path_signal == None )', ' ((controller.current_state==controller.L1_ADD) ) && |->  (controller.data_path_signal == None )', ' ((controller.current_state==controller.L2_ADD) ) && |->  (controller.data_path_signal == None )', ' ((controller.current_state==controller.L3_ADD) ) && |->  (controller.data_path_signal == None )', ' ((controller.current_state==controller.L4_ADD) ) && |->  (controller.data_path_signal == None )', ' ((controller.current_state==controller.MEM_STORE) ) && |->  (controller.data_path_signal == None )', ' (1 ) && |->  (controller.data_path_signal == None )', 'controller.data_path_signal == None;', '', '', '', '', '', '', '', '', '', ' &&']


 Number of items in line_buff 
:  20

 type :  <class 'list'>


 True_condition_property: 
[0]   ((controller.current_state==controller.INIT) ) && |->  (controller.data_path_signal == None )
[1]    ((controller.current_state==controller.MULT) ) && |->  (controller.data_path_signal == None )
[2]    ((controller.current_state==controller.L2_ADD) ) && |->  (controller.data_path_signal == None )
[3]    ((controller.current_state==controller.L4_ADD) ) && |->  (controller.data_path_signal == None )
[4]    (1 ) && |->  (controller.data_path_signal == None )
[5]   
[6]   
[7]   
[8]   
[9]   


 False_condition_property:  [' ((controller.current_state==controller.LOAD) ) && |->  (controller.data_path_signal == None )', ' ((controller.current_state==controller.L1_ADD) ) && |->  (controller.data_path_signal == None )', ' ((controller.current_state==controller.L3_ADD) ) && |->  (controller.data_path_signal == None )', ' ((controller.current_state==controller.MEM_STORE) ) && |->  (controller.data_path_signal == None )', 'controller.data_path_signal == None', '', '', '', '', ' &&']
\ length of prop_list :  10
[0]  True part ((controller.current_state==controller.INIT) )|->  (controller.data_path_signal == None )
[0]  False Part ((controller.current_state==controller.INIT) )|-> ( ((controller.current_state==controller.LOAD) ) && |->  (controller.data_path_signal == None ) )
[1]  True part ((controller.current_state==controller.MULT) )|->  (controller.data_path_signal == None )
[1]  False Part ((controller.current_state==controller.MULT) )|-> ( ((controller.current_state==controller.L1_ADD) ) && |->  (controller.data_path_signal == None ) )
[2]  True part ((controller.current_state==controller.L2_ADD) )|->  (controller.data_path_signal == None )
[2]  False Part ((controller.current_state==controller.L2_ADD) )|-> ( ((controller.current_state==controller.L3_ADD) ) && |->  (controller.data_path_signal == None ) )
[3]  True part ((controller.current_state==controller.L4_ADD) )|->  (controller.data_path_signal == None )
[3]  False Part ((controller.current_state==controller.L4_ADD) )|-> ( ((controller.current_state==controller.MEM_STORE) ) && |->  (controller.data_path_signal == None ) )
[4]  True part (1 )|->  (controller.data_path_signal == None )
[4]  False Part (1 )|-> (controller.data_path_signal == None )

 Handle logic for nested conditions here

 Handle logic for nested conditions here

 Handle logic for nested conditions here

 Handle logic for nested conditions here

 Handle logic for nested conditions here


 true_part :  ['((controller.current_state==controller.INIT) )|->  (controller.data_path_signal == None )', '((controller.current_state==controller.MULT) )|->  (controller.data_path_signal == None )', '((controller.current_state==controller.L2_ADD) )|->  (controller.data_path_signal == None )', '((controller.current_state==controller.L4_ADD) )|->  (controller.data_path_signal == None )', '(1 )|->  (controller.data_path_signal == None )']


 false_part :  ['((controller.current_state==controller.INIT) )|-> ( ((controller.current_state==controller.LOAD) ) && |->  (controller.data_path_signal == None ) )', '((controller.current_state==controller.MULT) )|-> ( ((controller.current_state==controller.L1_ADD) ) && |->  (controller.data_path_signal == None ) )', '((controller.current_state==controller.L2_ADD) )|-> ( ((controller.current_state==controller.L3_ADD) ) && |->  (controller.data_path_signal == None ) )', '((controller.current_state==controller.L4_ADD) )|-> ( ((controller.current_state==controller.MEM_STORE) ) && |->  (controller.data_path_signal == None ) )', '(1 )|-> (controller.data_path_signal == None )']

 Root Node Name :  data_path_signal

 ********** 


 Adding false properties*******

