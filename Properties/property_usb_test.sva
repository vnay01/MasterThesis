module usb_test (clk, reset, send_data, tx_ready, tx_valid, buff);

// Setting Port direction //
input clk;
input  reset;
input  send_data;
input  tx_ready;
input  tx_valid;
input  buff;
// Default Clocking and Reset
//default clocking (@posedge clk); clocking
// Property list 

//  Property Generated on Timestamp : 2023/07/10- 11 hr-44 m.-06 s
property t_Prop_0; 
	@(posedge clk) (((usb_test.current_state==usb_test.IDLE) ) && (usb_test.send_data )|->  (usb_test.next_state == usb_test.CRC1 ));
endproperty 

assert_Prop_0: assert property (t_Prop_0);
cover_prop_0: cover property (t_Prop_0);

property t_Prop_1; 
	@(posedge clk) (((usb_test.current_state==usb_test.CRC1) ) && ((!usb_test.tx_ready) )|->  (usb_test.next_state == usb_test.CRC2 ));
endproperty 

assert_Prop_1: assert property (t_Prop_1);
cover_prop_1: cover property (t_Prop_1);

property t_Prop_2; 
	@(posedge clk) (((usb_test.current_state==usb_test.CRC2) ) && (usb_test.tx_ready )|->  (usb_test.next_state == usb_test.IDLE ));
endproperty 

assert_Prop_2: assert property (t_Prop_2);
cover_prop_2: cover property (t_Prop_2);

property f_Prop_0; 
	@(posedge clk) (((usb_test.current_state==usb_test.IDLE) ) && (usb_test.send_data )|-> (usb_test.next_state == usb_test.IDLE ););
endproperty 

assert_Prop_0: assert property (f_Prop_0);
cover_prop_0: cover property (f_Prop_0);

property f_Prop_1; 
	@(posedge clk) (((usb_test.current_state==usb_test.CRC1) ) && ((!usb_test.tx_ready) )|-> (usb_test.next_state == usb_test.CRC1 ););
endproperty 

assert_Prop_1: assert property (f_Prop_1);
cover_prop_1: cover property (f_Prop_1);

property f_Prop_2; 
	@(posedge clk) (((usb_test.current_state==usb_test.CRC2) ) && (usb_test.tx_ready )|-> (usb_test.next_state == usb_test.CRC2 ););
endproperty 

assert_Prop_2: assert property (f_Prop_2);
cover_prop_2: cover property (f_Prop_2);


endmodule