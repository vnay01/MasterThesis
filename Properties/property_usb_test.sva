// DO NOT REMOVE //
// This file is a product of Master Thesis done by Vinay Singh (ESNIVIN) at Ericcson 

/////////////////////////////////////////////////
/*Author : ESNIVIN 
Property File : 
File Created at : 2023/07/30- 19 hr-24 m.-16 s
*/

//////////////////////////////////////////////////
bind usb_test v_usb_test i_usb_test ( .* );


module v_usb_test (clk, reset, send_data, tx_ready, tx_valid, buff);

// Setting Port direction //
input clk;
input  reset;
input  send_data;
input  tx_ready;
input  tx_valid;
input  buff;


 /* // Add your ports here, for eg internal state registers and typedefs 










*/

// ***** True property list for selected node : next_state*****


property t_Prop_next_state_0; 
	@(posedge clk) (((usb_test.current_state==usb_test.IDLE) ) && (usb_test.send_data )|->  (usb_test.next_state == usb_test.CRC1 ));
endproperty 

// Asserting Property
assert_t_Prop_next_state_0: assert property (t_Prop_next_state_0);
// Covering Property
cover_t_prop_next_state_0: cover property (t_Prop_next_state_0);

property t_Prop_next_state_1; 
	@(posedge clk) (((usb_test.current_state==usb_test.CRC1) ) && ((!usb_test.tx_ready) )|->  (usb_test.next_state == usb_test.CRC2 ));
endproperty 

// Asserting Property
assert_t_Prop_next_state_1: assert property (t_Prop_next_state_1);
// Covering Property
cover_t_prop_next_state_1: cover property (t_Prop_next_state_1);

property t_Prop_next_state_2; 
	@(posedge clk) (((usb_test.current_state==usb_test.CRC2) ) && (usb_test.tx_ready ) && ((usb_test.counter<9) )|->  (usb_test.next_state == usb_test.CRC1 ));
endproperty 

// Asserting Property
assert_t_Prop_next_state_2: assert property (t_Prop_next_state_2);
// Covering Property
cover_t_prop_next_state_2: cover property (t_Prop_next_state_2);

property t_Prop_next_state_3; 
	@(posedge clk) (((usb_test.counter==10) )|->  (usb_test.next_state == usb_test.IDLE ));
endproperty 

// Asserting Property
assert_t_Prop_next_state_3: assert property (t_Prop_next_state_3);
// Covering Property
cover_t_prop_next_state_3: cover property (t_Prop_next_state_3);



// ***** Writing False condition properties for selected node : next_state*****


 
 // When asserted, these properties will FAIL
property f_Prop_next_state_0; 
	@(posedge clk) (((usb_test.current_state==usb_test.IDLE) ) && (usb_test.send_data )|-> (usb_test.next_state == usb_test.current_state ));
endproperty 

assert_f_Prop_next_state_0: assert property (f_Prop_next_state_0);
cover_f_prop_next_state_0: cover property (f_Prop_next_state_0);

property f_Prop_next_state_1; 
	@(posedge clk) (((usb_test.current_state==usb_test.CRC1) ) && ((!usb_test.tx_ready) )|-> (usb_test.next_state == usb_test.current_state ));
endproperty 

assert_f_Prop_next_state_1: assert property (f_Prop_next_state_1);
cover_f_prop_next_state_1: cover property (f_Prop_next_state_1);

property f_Prop_next_state_2; 
	@(posedge clk) (((usb_test.current_state==usb_test.CRC2) ) && (usb_test.tx_ready ) && ((usb_test.counter<9) )|-> (usb_test.next_state == usb_test.current_state ));
endproperty 

assert_f_Prop_next_state_2: assert property (f_Prop_next_state_2);
cover_f_prop_next_state_2: cover property (f_Prop_next_state_2);

property f_Prop_next_state_3; 
	@(posedge clk) (((usb_test.counter==10) )|-> ( ));
endproperty 

assert_f_Prop_next_state_3: assert property (f_Prop_next_state_3);
cover_f_prop_next_state_3: cover property (f_Prop_next_state_3);



 // Add additional Properties here : 

// ***** True property list for selected node : tx_valid*****


property t_Prop_tx_valid_0; 
	@(posedge clk) (((usb_test.current_state==usb_test.IDLE) ) && (usb_test.send_data )|->  (usb_test.tx_valid == None ));
endproperty 

// Asserting Property
assert_t_Prop_tx_valid_0: assert property (t_Prop_tx_valid_0);
// Covering Property
cover_t_prop_tx_valid_0: cover property (t_Prop_tx_valid_0);

property t_Prop_tx_valid_1; 
	@(posedge clk) (((usb_test.current_state==usb_test.CRC1) ) && ((!usb_test.tx_ready) )|->  (usb_test.tx_valid == None ));
endproperty 

// Asserting Property
assert_t_Prop_tx_valid_1: assert property (t_Prop_tx_valid_1);
// Covering Property
cover_t_prop_tx_valid_1: cover property (t_Prop_tx_valid_1);

property t_Prop_tx_valid_2; 
	@(posedge clk) (((usb_test.current_state==usb_test.CRC2) ) && (usb_test.tx_ready )|->  (usb_test.tx_valid == None ));
endproperty 

// Asserting Property
assert_t_Prop_tx_valid_2: assert property (t_Prop_tx_valid_2);
// Covering Property
cover_t_prop_tx_valid_2: cover property (t_Prop_tx_valid_2);

property t_Prop_tx_valid_3; 
	@(posedge clk) ((1 )|->  (usb_test.tx_valid == None ));
endproperty 

// Asserting Property
assert_t_Prop_tx_valid_3: assert property (t_Prop_tx_valid_3);
// Covering Property
cover_t_prop_tx_valid_3: cover property (t_Prop_tx_valid_3);



// ***** Writing False condition properties for selected node : tx_valid*****


 
 // When asserted, these properties will FAIL
property f_Prop_tx_valid_0; 
	@(posedge clk) (((usb_test.current_state==usb_test.IDLE) ) && (usb_test.send_data )|-> (usb_test.tx_valid == None ));
endproperty 

assert_f_Prop_tx_valid_0: assert property (f_Prop_tx_valid_0);
cover_f_prop_tx_valid_0: cover property (f_Prop_tx_valid_0);

property f_Prop_tx_valid_1; 
	@(posedge clk) (((usb_test.current_state==usb_test.CRC1) ) && ((!usb_test.tx_ready) )|-> (usb_test.tx_valid == None ));
endproperty 

assert_f_Prop_tx_valid_1: assert property (f_Prop_tx_valid_1);
cover_f_prop_tx_valid_1: cover property (f_Prop_tx_valid_1);

property f_Prop_tx_valid_2; 
	@(posedge clk) (((usb_test.current_state==usb_test.CRC2) ) && (usb_test.tx_ready )|-> (usb_test.tx_valid == None ));
endproperty 

assert_f_Prop_tx_valid_2: assert property (f_Prop_tx_valid_2);
cover_f_prop_tx_valid_2: cover property (f_Prop_tx_valid_2);

property f_Prop_tx_valid_3; 
	@(posedge clk) ((1 )|-> ( ));
endproperty 

assert_f_Prop_tx_valid_3: assert property (f_Prop_tx_valid_3);
cover_f_prop_tx_valid_3: cover property (f_Prop_tx_valid_3);



 // Add additional Properties here : 


endmodule